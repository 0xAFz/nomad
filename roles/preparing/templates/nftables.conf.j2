#!/usr/sbin/nft -f

flush ruleset

{% if inventory_hostname == 'internal-network' %}
table ip nat {
  chain prerouting {
    type nat hook prerouting priority dstnat;
{% if enable_ip6gre and ip6gre_nat %}
    tcp dport {{ sshd_config.Port | default('22') }} dnat to {{ hostvars['internal-network'].ansible_host }}
    dnat to {{ ip6gre_external_network_private_ipv4 }}
{% endif %}

  }

  chain postrouting {
    type nat hook postrouting priority srcnat;
{% if enable_ip6gre and ip6gre_nat %}
    masquerade
{% endif %}

  }
}
{% endif %}

table inet mangle {
    chain prerouting {
        type filter hook prerouting priority mangle; policy accept;
        {% if dscp and firewall_config.udp_port_access is defined and firewall_config.udp_port_access | length > 0 %}udp dport { {{ firewall_config.udp_port_access | join(', ') }} } ip dscp set 0x2e{% endif %}

    }

    chain postrouting {
        type filter hook postrouting priority mangle; policy accept;
        {% if dscp and firewall_config.udp_port_access is defined and firewall_config.udp_port_access | length > 0 %}udp sport { {{ firewall_config.udp_port_access | join(', ') }} } ip dscp set {% if inventory_hostname == 'internal-network' %}0x0{% else %}0x2e{% endif %}{% endif %}

    }
}

table inet filter {
    set TRUSTED_IPS {
        type ipv4_addr
        flags interval
{% if firewall_config.trusted_range is defined and firewall_config.trusted_range | length > 0 %}
        elements = { {{ firewall_config.trusted_range | join(', ') }} }
{% endif %}
    }

    set TCP_PORTS {
        type inet_service
        elements = { {{ sshd_config.Port | default('22') }}{% if firewall_config.tcp_port_access is defined and firewall_config.tcp_port_access | length > 0 %}, {{ firewall_config.tcp_port_access | join(', ') }}{% endif %} }
    }

    set UDP_PORTS {
        type inet_service
{% if firewall_config.udp_port_access is defined and firewall_config.udp_port_access | length > 0 %}
        elements = { {{ firewall_config.udp_port_access | join(', ') }} }
{% endif %}
    }

    set NETWORK_ADAPTERS {
        type ifname
{% if firewall_config.network_adapter_access is defined and firewall_config.network_adapter_access | length > 0 %}
        elements = { {{ firewall_config.network_adapter_access | join(', ') }} }
{% endif %}
    }

    chain input {
        type filter hook input priority filter; policy drop;

        ct state vmap { established : accept, related : accept, invalid : drop }
        ip saddr @TRUSTED_IPS accept
        meta l4proto { icmp, icmpv6 } accept
        ip protocol { 41, 47 } accept
        iifname @NETWORK_ADAPTERS accept
        tcp dport @TCP_PORTS accept
        udp dport @UDP_PORTS accept
    }

    chain forward {
        type filter hook forward priority filter; policy drop;
    }
}
